#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CodeHub.WebViews
{
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;


[System.CodeDom.Compiler.GeneratedCodeAttribute("RazorTemplatePreprocessor", "2.6.0.0")]
public partial class DiffWebView : DiffWebViewBase
{

#line hidden

#line 1 "DiffWebView.cshtml"
public DiffModel Model { get; set; }

#line default
#line hidden


public override void Execute()
{
WriteLiteral("<!DOCTYPE html>\n<html>\n  <head>\n    <title></title>\n    <meta");

WriteLiteral(" charset=\"utf-8\"");

WriteLiteral(">\n    <meta");

WriteLiteral(" name=\"viewport\"");

WriteLiteral(" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable" +
"=0\"");

WriteLiteral(@"/>
    <style>
      head, body {
        margin: 0;
        -webkit-text-size-adjust: none;
        -moz-text-size-adjust: none;
      }

      table {
        width: 100%;
        border-collapse: collapse;
        font-family: Menlo,Consolas,monospace;
        font-size: ");


#line 19 "DiffWebView.cshtml"
               Write(Model.FontSize);


#line default
#line hidden
WriteLiteral("px;\n      }\n\n      td {\n        height: 20px;\n        line-height: 20px;\n      }\n" +
"\n      .content {\n        white-space: nowrap;\n        padding: 0 10px;\n        " +
"border-left: 1px solid #eee;\n      }\n\n      .code-line {\n        display: inline" +
";\n        background: 0 0;\n        padding: 0;\n        word-wrap: normal;\n      " +
"  white-space: pre;\n      }\n\n      .line-prefix {\n        -webkit-touch-callout:" +
" none;\n        -webkit-user-select: none;\n        -moz-user-select: none;\n      " +
"  -ms-user-select: none;\n        user-select: none;\n\n        display: inline;\n  " +
"      background: 0 0;\n        padding: 0;\n        word-wrap: normal;\n        wh" +
"ite-space: pre;\n      }\n\n      tr.insert > td {\n        background-color: #dfd;\n" +
"        border-color: #b4e2b4;\n      }\n\n      tr.delete > td {\n        backgroun" +
"d-color: #fee8e9;\n        border-color: #e9aeae;\n      }\n\n      tr.info > td {\n " +
"       background-color: #f8fafd;\n        color: rgba(0,0,0,.3);\n        border-" +
"color: #d5e4f2;\n      }\n\n      .line-number {\n        -webkit-touch-callout: non" +
"e;\n        -webkit-user-select: none;\n        -moz-user-select: none;\n        -m" +
"s-user-select: none;\n        user-select: none;\n        width: 40px;\n        col" +
"or: rgba(0,0,0,.3);\n        text-align: right;\n        cursor: pointer;\n        " +
"padding: 0 10px 0 0;\n      }\n\n      .comment > td {\n        padding: 5px;\n      " +
"  border-top: 1px solid #d5e4f2;\n        border-bottom: 1px solid #d5e4f2;\n     " +
" }\n\n      .comment-inner {\n        border: 1px solid #d5e4f2;\n        border-rad" +
"ius: 2px;\n      }\n\n      .reply-line {\n        border-top: 1px solid #d5e4f2;\n  " +
"      padding: 0;\n      }\n\n      .reply-line button {\n        width: 100%;\n     " +
"   background: #f6f8fa;\n        height: 32px;\n        border: none;\n        font" +
"-weight: 700;\n      }\n\n      .reply-line button:active {\n        background: #e6" +
"e8eb;\n        border: 1px solid #c4c4c4;\n      }\n\n      img.avatar {\n        mar" +
"gin-top: 4px;\n        border-radius: 2px;\n        float: left;\n      }\n\n      .c" +
"omment-content {\n        margin-left: 44px;\n      }\n\n      .comment-line {\n     " +
"   padding: 8px 8px\n      }\n\n      .comment-content h4 {\n        display: inline" +
" !important;\n        margin-top: 0;\n        margin-bottom: 0;\n        font-weigh" +
"t: 400;\n      }\n\n      .text-gray {\n        color: #586069 !important\n      }\n\n " +
"     .comment-body {\n        width: 100%;\n        padding: 0;\n        overflow: " +
"visible;\n      }\n      .comment-body > :first-child {\n        margin-top: 0 !imp" +
"ortant;\n      }\n\t\t\t.comment-body > :last-child {\n  \t\t\tmargin-bottom: 0 !importan" +
"t;\n\t\t\t}\n      .comment-body h1,\n      .comment-body h2,\n      .comment-body h3,\n" +
"      .comment-body h4,\n      .comment-body h5,\n      .comment-body h6 {\n       " +
" margin: 1em 0 15px;\n        padding: 0;\n        font-weight: bold;\n        line" +
"-height: 1.7;\n        cursor: text;\n        position: relative;\n      }\n      .c" +
"omment-body h1 {\n        font-size: 1.8em;\n        border-bottom: 1px solid #ddd" +
";\n      }\n      .comment-body p,\n      .comment-body blockquote,\n      .comment-" +
"body ul,\n      .comment-body ol,\n      .comment-body dl,\n      .comment-body tab" +
"le,\n      .comment-body pre {\n        margin: 15px 0;\n      }\n      .comment-bod" +
"y h2 {\n        font-size: 1.4em;\n        border-bottom: 1px solid #eee;\n      }\n" +
"      .comment-body ul,\n      .comment-body ol {\n        padding-left: 20px;\n   " +
"   }\n      .comment-body a {\n        color: #4183c4;\n        text-decoration: no" +
"ne;\n        text-decoration: none;\n      }\n      .comment-body .highlight pre,\n " +
"     .comment-body pre {\n        background-color: #f8f8f8;\n        border: 1px " +
"solid #ddd;\n        line-height: 19px;\n        overflow: auto;\n        padding: " +
"6px 10px;\n        border-radius: 3px;\n      }\n      .comment-body pre {\n        " +
"word-wrap: normal;\n      }\n      .comment-body dl {\n        padding: 0;\n      }\n" +
"      .comment-body dl dt {\n        font-weight: bold;\n        font-style: itali" +
"c;\n        padding: 0;\n        margin-top: 15px;\n      }\n      .comment-body dl " +
"dd {\n        margin-bottom: 15px;\n        padding: 0 15px;\n      }\n      .commen" +
"t-body table {\n        width: 100%;\n        overflow: auto;\n        display: blo" +
"ck;\n      }\n      .comment-body table tr {\n        border-top: 1px solid #ccc;\n " +
"       background-color: #fff;\n      }\n      .comment-body table tr:nth-child(2n" +
") {\n        background-color: #f8f8f8;\n      }\n      .comment-body table th,\n   " +
"   .comment-body table td {\n        border: 1px solid #ddd;\n        padding: 6px" +
" 13px;\n      }\n      .comment-body table th {\n        font-weight: bold;\n      }" +
"\n      .comment-body img {\n        max-width: 100%;\n        -moz-box-sizing: bor" +
"der-box;\n        box-sizing: border-box;\n      }\n      .comment-body ul.task-lis" +
"t > li.task-list-item {\n        list-style-type: none;\n      }\n      .comment-bo" +
"dy .task-list-item-checkbox {\n        margin-left: -20px;\n        vertical-align" +
": middle;\n      }\n\n    </style>\n\t<script>\n    function invokeNative(functionName" +
", args) {\n      try {\n        var iframe = document.createElement(\'IFRAME\');\n   " +
"     iframe.setAttribute(\'src\', \'app://\' + functionName + \'#\' + JSON.stringify(a" +
"rgs));\n        document.body.appendChild(iframe);\n        iframe.parentNode.remo" +
"veChild(iframe);\n        iframe = null;  \n      } catch (err) {\n          alert(" +
"err.message);\n      }\n    }\n    function lineClick(fileLine, patchLine) {\n  \t\tin" +
"vokeNative(\"comment\", { fileLine, patchLine });\n  \t}\n  \tfunction replyTo(id) {\n " +
" \t\tinvokeNative(\"reply-to\", { id });\n  \t}\n\t</script>\n  </head>\n  <body>\n    <tab" +
"le>\n      <tbody>\t\n");


#line 270 "DiffWebView.cshtml"
        

#line default
#line hidden

#line 270 "DiffWebView.cshtml"
         foreach (var chunk in Model.Chunks)
    		{


#line default
#line hidden
WriteLiteral("\t        <tr");

WriteLiteral(" class=\"info\"");

WriteLiteral(">\n            <td");

WriteLiteral(" class=\"line-number\"");

WriteLiteral(">...</td>\n            <td");

WriteLiteral(" class=\"line-number\"");

WriteLiteral(">...</td>\n            <td");

WriteLiteral(" class=\"content\"");

WriteLiteral(">");


#line 275 "DiffWebView.cshtml"
                           Write(chunk.Content);


#line default
#line hidden
WriteLiteral("</td>\n          </tr>\n");


#line 277 "DiffWebView.cshtml"

    		foreach (var line in chunk.Lines)
  			{
  				if (line.LineEquality == DiffModel.LineEquality.Equal)
  				{


#line default
#line hidden
WriteLiteral("            <tr");

WriteAttribute ("onclick", " onclick=\"", "\""
, Tuple.Create<string,object,bool> ("", "lineClick(", true)

#line 282 "DiffWebView.cshtml"
, Tuple.Create<string,object,bool> ("", line.Index

#line default
#line hidden
, false)
, Tuple.Create<string,object,bool> ("", ",", true)

#line 282 "DiffWebView.cshtml"
        , Tuple.Create<string,object,bool> (" ", line.NewLine

#line default
#line hidden
, false)
, Tuple.Create<string,object,bool> ("", ")", true)
);
WriteLiteral(">\n              <td");

WriteLiteral(" class=\"line-number\"");

WriteLiteral(">");


#line 283 "DiffWebView.cshtml"
                                 Write(line.BaseLine);


#line default
#line hidden
WriteLiteral("</td>\n              <td");

WriteLiteral(" class=\"line-number\"");

WriteLiteral(">");


#line 284 "DiffWebView.cshtml"
                                 Write(line.NewLine);


#line default
#line hidden
WriteLiteral("</td>\n              <td");

WriteLiteral(" class=\"content\"");

WriteLiteral(">\n                <span");

WriteLiteral(" class=\"line-prefix\"");

WriteLiteral(">&nbsp;</span>\n                <span");

WriteLiteral(" class=\"code-line\"");

WriteLiteral(">");


#line 287 "DiffWebView.cshtml"
                                   Write(line.Content);


#line default
#line hidden
WriteLiteral("</span>\n              </td>\n            </tr>\n");


#line 290 "DiffWebView.cshtml"
  				}
  				else if (line.LineEquality == DiffModel.LineEquality.Insert)
          {


#line default
#line hidden
WriteLiteral("            <tr");

WriteLiteral(" class=\"insert\"");

WriteAttribute ("onclick", " onclick=\"", "\""
, Tuple.Create<string,object,bool> ("", "lineClick(", true)

#line 293 "DiffWebView.cshtml"
           , Tuple.Create<string,object,bool> ("", line.Index

#line default
#line hidden
, false)
, Tuple.Create<string,object,bool> ("", ",", true)

#line 293 "DiffWebView.cshtml"
                       , Tuple.Create<string,object,bool> (" ", line.NewLine

#line default
#line hidden
, false)
, Tuple.Create<string,object,bool> ("", ")", true)
);
WriteLiteral(">\n              <td");

WriteLiteral(" class=\"line-number\"");

WriteLiteral("></td>\n              <td");

WriteLiteral(" class=\"line-number\"");

WriteLiteral(">");


#line 295 "DiffWebView.cshtml"
                                 Write(line.NewLine);


#line default
#line hidden
WriteLiteral("</td>\n              <td");

WriteLiteral(" class=\"content\"");

WriteLiteral(">\n                <span");

WriteLiteral(" class=\"line-prefix\"");

WriteLiteral(">+</span>\n                <span");

WriteLiteral(" class=\"code-line\"");

WriteLiteral(">");


#line 298 "DiffWebView.cshtml"
                                   Write(line.Content);


#line default
#line hidden
WriteLiteral("</span>\n              </td>\n            </tr>\n");


#line 301 "DiffWebView.cshtml"
          }
  				else if (line.LineEquality == DiffModel.LineEquality.Delete)
          {


#line default
#line hidden
WriteLiteral("            <tr");

WriteLiteral(" class=\"delete\"");

WriteAttribute ("onclick", " onclick=\"", "\""
, Tuple.Create<string,object,bool> ("", "lineClick(", true)

#line 304 "DiffWebView.cshtml"
           , Tuple.Create<string,object,bool> ("", line.Index

#line default
#line hidden
, false)
, Tuple.Create<string,object,bool> ("", ",", true)

#line 304 "DiffWebView.cshtml"
                       , Tuple.Create<string,object,bool> (" ", line.BaseLine

#line default
#line hidden
, false)
, Tuple.Create<string,object,bool> ("", ")", true)
);
WriteLiteral(">\n              <td");

WriteLiteral(" class=\"line-number\"");

WriteLiteral(">");


#line 305 "DiffWebView.cshtml"
                                 Write(line.BaseLine);


#line default
#line hidden
WriteLiteral("</td>\n              <td");

WriteLiteral(" class=\"line-number\"");

WriteLiteral("></td>\n              <td");

WriteLiteral(" class=\"content\"");

WriteLiteral(">\n                <span");

WriteLiteral(" class=\"line-prefix\"");

WriteLiteral(">-</span>\n                <span");

WriteLiteral(" class=\"code-line\"");

WriteLiteral(">");


#line 309 "DiffWebView.cshtml"
                                   Write(line.Content);


#line default
#line hidden
WriteLiteral("</span>\n              </td>\n            </tr>\n");


#line 312 "DiffWebView.cshtml"
          }

  				foreach (var commentSet in line.CommentSets)
  				{


#line default
#line hidden
WriteLiteral("  \t\t      <tr");

WriteLiteral(" class=\"comment\"");

WriteLiteral(">\n              <td");

WriteLiteral(" colspan=\"3\"");

WriteLiteral(">\n                <div");

WriteLiteral(" class=\"comment-inner\"");

WriteLiteral(">\n");


#line 319 "DiffWebView.cshtml"
                  

#line default
#line hidden

#line 319 "DiffWebView.cshtml"
                   foreach (var comment in commentSet.Value)
                  {


#line default
#line hidden
WriteLiteral("                    <div");

WriteLiteral(" class=\"comment-line\"");

WriteLiteral(">\n                      <img");

WriteAttribute ("src", " src=\"", "\""

#line 322 "DiffWebView.cshtml"
, Tuple.Create<string,object,bool> ("", comment.AvatarUrl

#line default
#line hidden
, false)
);
WriteLiteral(" class=\"avatar\"");

WriteLiteral(" width=\"28\"");

WriteLiteral(" height=\"28\"");

WriteLiteral(" />\n                      <div");

WriteLiteral(" class=\"comment-content\"");

WriteLiteral(">\n                        <h4><strong>");


#line 324 "DiffWebView.cshtml"
                               Write(comment.Username);


#line default
#line hidden
WriteLiteral("</strong> <span");

WriteLiteral(" class=\"text-gray\"");

WriteLiteral(">");


#line 324 "DiffWebView.cshtml"
                                                                                  Write(comment.Date);


#line default
#line hidden
WriteLiteral("</span></h4>\n                        <div");

WriteLiteral(" class=\"comment-body\"");

WriteLiteral(">\n");


#line 326 "DiffWebView.cshtml"
          								

#line default
#line hidden

#line 326 "DiffWebView.cshtml"
                                          WriteLiteral(comment.Body);

#line default
#line hidden
WriteLiteral("\n                        </div>\n                      </div>\n                    " +
"</div>\n");


#line 330 "DiffWebView.cshtml"
  				        }


#line default
#line hidden
WriteLiteral("                  <div");

WriteLiteral(" class=\"reply-line\"");

WriteLiteral(">\n                    <button");

WriteAttribute ("onclick", " onclick=\"", "\""
, Tuple.Create<string,object,bool> ("", "replyTo(", true)

#line 332 "DiffWebView.cshtml"
      , Tuple.Create<string,object,bool> ("", commentSet.Key

#line default
#line hidden
, false)
, Tuple.Create<string,object,bool> ("", ")", true)
);
WriteLiteral(">Reply</button>\n                  </div>\n                </div>\n              </t" +
"d>\n            </tr>\n");


#line 337 "DiffWebView.cshtml"
  				}
  			}
  		}


#line default
#line hidden
WriteLiteral("      </tbody>\n    </table>\n  </body>\n</html>");

}
}

// NOTE: this is the default generated helper class. You may choose to extract it to a separate file 
// in order to customize it or share it between multiple templates, and specify the template's base 
// class via the @inherits directive.
public abstract class DiffWebViewBase
{

		// This field is OPTIONAL, but used by the default implementation of Generate, Write, WriteAttribute and WriteLiteral
		//
		System.IO.TextWriter __razor_writer;

		// This method is OPTIONAL
		//
		/// <summary>Executes the template and returns the output as a string.</summary>
		/// <returns>The template output.</returns>
		public string GenerateString ()
		{
			using (var sw = new System.IO.StringWriter ()) {
				Generate (sw);
				return sw.ToString ();
			}
		}

		// This method is OPTIONAL, you may choose to implement Write and WriteLiteral without use of __razor_writer
		// and provide another means of invoking Execute.
		//
		/// <summary>Executes the template, writing to the provided text writer.</summary>
		/// <param name="writer">The TextWriter to which to write the template output.</param>
		public void Generate (System.IO.TextWriter writer)
		{
			__razor_writer = writer;
			Execute ();
			__razor_writer = null;
		}

		// This method is REQUIRED, but you may choose to implement it differently
		//
		/// <summary>Writes a literal value to the template output without HTML escaping it.</summary>
		/// <param name="value">The literal value.</param>
		protected void WriteLiteral (string value)
		{
			__razor_writer.Write (value);
		}

		// This method is REQUIRED if the template contains any Razor helpers, but you may choose to implement it differently
		//
		/// <summary>Writes a literal value to the TextWriter without HTML escaping it.</summary>
		/// <param name="writer">The TextWriter to which to write the literal.</param>
		/// <param name="value">The literal value.</param>
		protected static void WriteLiteralTo (System.IO.TextWriter writer, string value)
		{
			writer.Write (value);
		}

		// This method is REQUIRED, but you may choose to implement it differently
		//
		/// <summary>Writes a value to the template output, HTML escaping it if necessary.</summary>
		/// <param name="value">The value.</param>
		/// <remarks>The value may be a Action<System.IO.TextWriter>, as returned by Razor helpers.</remarks>
		protected void Write (object value)
		{
			WriteTo (__razor_writer, value);
		}

		// This method is REQUIRED if the template contains any Razor helpers, but you may choose to implement it differently
		//
		/// <summary>Writes an object value to the TextWriter, HTML escaping it if necessary.</summary>
		/// <param name="writer">The TextWriter to which to write the value.</param>
		/// <param name="value">The value.</param>
		/// <remarks>The value may be a Action<System.IO.TextWriter>, as returned by Razor helpers.</remarks>
		protected static void WriteTo (System.IO.TextWriter writer, object value)
		{
			if (value == null)
				return;

			var write = value as Action<System.IO.TextWriter>;
			if (write != null) {
				write (writer);
				return;
			}

			//NOTE: a more sophisticated implementation would write safe and pre-escaped values directly to the
			//instead of double-escaping. See System.Web.IHtmlString in ASP.NET 4.0 for an example of this.
			writer.Write(System.Net.WebUtility.HtmlEncode (value.ToString ()));
		}

		// This method is REQUIRED, but you may choose to implement it differently
		//
		/// <summary>
		/// Conditionally writes an attribute to the template output.
		/// </summary>
		/// <param name="name">The name of the attribute.</param>
		/// <param name="prefix">The prefix of the attribute.</param>
		/// <param name="suffix">The suffix of the attribute.</param>
		/// <param name="values">Attribute values, each specifying a prefix, value and whether it's a literal.</param>
		protected void WriteAttribute (string name, string prefix, string suffix, params Tuple<string,object,bool>[] values)
		{
			WriteAttributeTo (__razor_writer, name, prefix, suffix, values);
		}

		// This method is REQUIRED if the template contains any Razor helpers, but you may choose to implement it differently
		//
		/// <summary>
		/// Conditionally writes an attribute to a TextWriter.
		/// </summary>
		/// <param name="writer">The TextWriter to which to write the attribute.</param>
		/// <param name="name">The name of the attribute.</param>
		/// <param name="prefix">The prefix of the attribute.</param>
		/// <param name="suffix">The suffix of the attribute.</param>
		/// <param name="values">Attribute values, each specifying a prefix, value and whether it's a literal.</param>
		///<remarks>Used by Razor helpers to write attributes.</remarks>
		protected static void WriteAttributeTo (System.IO.TextWriter writer, string name, string prefix, string suffix, params Tuple<string,object,bool>[] values)
		{
			// this is based on System.Web.WebPages.WebPageExecutingBase
			// Copyright (c) Microsoft Open Technologies, Inc.
			// Licensed under the Apache License, Version 2.0
			if (values.Length == 0) {
				// Explicitly empty attribute, so write the prefix and suffix
				writer.Write (prefix);
				writer.Write (suffix);
				return;
			}

			bool first = true;
			bool wroteSomething = false;

			for (int i = 0; i < values.Length; i++) {
				Tuple<string,object,bool> attrVal = values [i];
				string attPrefix = attrVal.Item1;
				object value = attrVal.Item2;
				bool isLiteral = attrVal.Item3;

				if (value == null) {
					// Nothing to write
					continue;
				}

				// The special cases here are that the value we're writing might already be a string, or that the 
				// value might be a bool. If the value is the bool 'true' we want to write the attribute name instead
				// of the string 'true'. If the value is the bool 'false' we don't want to write anything.
				//
				// Otherwise the value is another object (perhaps an IHtmlString), and we'll ask it to format itself.
				string stringValue;
				bool? boolValue = value as bool?;
				if (boolValue == true) {
					stringValue = name;
				} else if (boolValue == false) {
					continue;
				} else {
					stringValue = value as string;
				}

				if (first) {
					writer.Write (prefix);
					first = false;
				} else {
					writer.Write (attPrefix);
				}

				if (isLiteral) {
					writer.Write (stringValue ?? value);
				} else {
					WriteTo (writer, stringValue ?? value);
				}
				wroteSomething = true;
			}
			if (wroteSomething) {
				writer.Write (suffix);
			}
		}
		// This method is REQUIRED. The generated Razor subclass will override it with the generated code.
		//
		///<summary>Executes the template, writing output to the Write and WriteLiteral methods.</summary>.
		///<remarks>Not intended to be called directly. Call the Generate method instead.</remarks>
		public abstract void Execute ();

}
}
#pragma warning restore 1591
